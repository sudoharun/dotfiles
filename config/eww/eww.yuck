(include "variables.yuck")

; Tray
(defwidget tray []
  (box
    :class "tray"
    :halign "end"
    :space-evenly false
    (box
      :class "tray-item wifi"
      :spacing 0
      :space-evenly false
      (image :class "icon wifi-icon" :path wifi-icon :image-height "20")
      (label :class "text wifi-text" :text wifi-strength))
    (box
      :class "tray-item vol"
      :spacing 0
      :space-evenly false
      (image :class "icon vol-icon" :path vol-icon :image-height "20")
      (label :class "text vol-text" :text "${vol-num}%"))
    (box
      :class "tray-item bat"
      :spacing 0
      :space-evenly false
      (image :class "icon bat-icon" :path bat-icon :image-height "26")
      (label :class "text bat-text" :text "${bat-num}%"))
    (box
      :class "tray-item br"
      :spacing 0
      :space-evenly false
      (image :class "icon br-icon" :path "images/brightness.svg" :image-height "20")
      (label :class "text vol-text" :text "${br}%"))
    (box
      :class "tray-item"
      :spacing 0
      :space-evenly false
      (image :class "icon systray-icon" :path "images/tray.svg" :image-height "20")
      (systray
        :spacing 10
        :orientation "h"
        :space-evenly true
        :icon-size "20"))
    ))

; Workspaces
(defwidget workspaces []
  (box
    :class "workspaces"
    :halign "center"
    :hexpand false
    ; :visible {center-option == "workspaces" ? true : false}
    (literal :content numworkspaces)))

(defwidget time []
  (box
    :class "time"
    :space-evenly false
    :spacing 0
    (label :class "text" :text "")
    (image :class "icon clock-icon" :path "images/clock.svg" :image-width "20" :image-height "20")
    (label :class "text" :text time)))

(defwidget date []
  (box
    :class "date"
    :halign "start" 
    :spacing 0
    :space-evenly false
    (image :class "icon date-icon" :path "images/calendar.svg" :image-width "20" :image-height "20")
    (label :class "text" :text date)))

(defwidget left []
  (box
    :class "left"
    :halign "start"
    :space-evenly false
    :spacing 0
    (time)
    (date)))

(defwidget lock []
  (box
    :class {power-option == 1 ? "pwr-active pwr-widget" : "pwr-inactive pwr-widget"}
    :orientation "h"
    :spacing 10
    :space-evenly false
    (image :path {power-option == 1 ? "images/lock-selected.svg" : "images/lock.svg"} :image-width 20 :image-height 20)
    (revealer
      :transition "slideright"
      :reveal {power-reveal == 1 ? true : false}
      :duration "250ms"
    (label :text "Lock"))))

(defwidget suspend []
  (box
    :class {power-option == 2 ? "pwr-active pwr-widget" : "pwr-inactive pwr-widget"}
    :orientation "h"
    :spacing 10
    :space-evenly false
    (image :path {power-option == 2 ? "images/suspend-selected.svg" : "images/suspend.svg"} :image-width 20 :image-height 20)
    (revealer
      :transition "slideright"
      :reveal {power-reveal == 2 ? true : false}
      :duration "250ms"
    (label :text "Suspend"))))

(defwidget logout []
  (box
    :class {power-option == 3 ? "pwr-active pwr-widget" : "pwr-inactive widget"}
    :orientation "h"
    :spacing 10
    :space-evenly false
    (image :path {power-option == 3 ? "images/logout-selected.svg" : "images/logout.svg"} :image-width 20 :image-height 20)
    (revealer
      :transition "slideright"
      :reveal {power-reveal == 3 ? true : false}
      :duration "250ms"
    (label :text "Logout"))))

(defwidget reboot []
  (box
    :class {power-option == 4 ? "pwr-active pwr-widget" : "pwr-inactive widget"}
    :orientation "h"
    :spacing 10
    :space-evenly false
    (image :path {power-option == 4 ? "images/reboot-selected.svg" : "images/reboot.svg"} :image-width 20 :image-height 20)
    (revealer
      :transition "slideright"
      :reveal {power-reveal == 4 ? true : false}
      :duration "250ms"
    (label :text "Reboot"))))

(defwidget shutdown []
  (box
    :class {power-option == 5 ? "pwr-active pwr-widget" : "pwr-inactive pwr-widget"}
    :orientation "h"
    :spacing 10
    :space-evenly false
    (image :path {power-option == 5 ? "images/shutdown-selected.svg" : "images/shutdown.svg"} :image-width 20 :image-height 20)
    (revealer
      :transition "slideright"
      :reveal {power-reveal == 5 ? true : false}
      :duration "250ms"
    (label :text "Shutdown"))))

(defwidget powermenu []
  (box
    :class "powermenu"
    :spacing 25
    :space-evenly false
    :orientation "h"
    (lock)
    (suspend)
    (logout)
    (reboot)
    (shutdown)))

(defwidget fullscreen []
  (box
    :class {screenshot-option == 1 ? "ss-active ss-widget" : "ss-inactive ss-widget"}
    :spacing 10
    :space-evenly false
    :orientation "h"
    (image :path {screenshot-option == 1 ? "images/screenshot-selected.svg" : "images/screenshot.svg"} :image-width 20 :image-height 20)
    (revealer
      :transition "slideright"
      :reveal {screenshot-reveal == 1 ? true : false}
      :duration "250ms"
      (label :text "Fullscreen"))))

(defwidget delay []
  (box
    :class {screenshot-option == 2 ? "ss-active ss-widget" : "ss-inactive ss-widget"}
    :spacing 10
    :space-evenly false
    :orientation "h"
    (image :path {screenshot-option == 2 ? "images/alarm-selected.svg" : "images/alarm.svg"} :image-width 20 :image-height 20)
    (revealer
      :transition "slideright"
      :reveal {screenshot-reveal == 2 ? true : false}
      :duration "250ms"
      (label :text "3s"))))

(defwidget region []
  (box
    :class {screenshot-option == 3 ? "ss-active ss-widget" : "ss-inactive ss-widget"}
    :spacing 10
    :space-evenly false
    :orientation "h"
    (image :path {screenshot-option == 3 ? "images/crop-selected.svg" : "images/crop.svg"} :image-width 20 :image-height 20)
    (revealer
      :transition "slideright"
      :reveal {screenshot-reveal == 3 ? true : false}
      :duration "250ms"
      (label :text "Region"))))

(defwidget screenshooter []
  (box
    :class "screenshooter"
    :spacing 25
    :space-evenly false
    :orientation "h"
    (fullscreen)
    (delay)
    (region)))

(defwidget center []
  (box
    :spacing 0
    :space-evenly false
    (box
      :visible {center-option == "screenshooter" ? true : false}
      (revealer
        :transition "crossfade"
        :reveal {reveal-option == "screenshooter" ? true : false}
        :duration "500ms"
        (screenshooter)))
    (box
      :visible {center-option == "workspaces" ? true : false}
      (revealer
        :transition "crossfade"
        :reveal {reveal-option == "workspaces" ? true : false}
        :duration "500ms"
        (workspaces)))
    (box
      :visible {center-option == "powermenu" ? true : false}
      (revealer
        :transition "crossfade"
        :reveal {reveal-option == "powermenu" ? true : false}
        :duration "500ms"
        (powermenu)))))

(defwidget bar []
  (centerbox
    :orientation "h"
    :class "bar"
    (left)
    (center)
    (tray)))

(defwindow bar
  :stacking "bg"
  :monitor "0"
  :exclusive true
  :namespace "bar"
  :geometry (geometry
    :x "0px"
    :y "0%"
    :width "100%"
    :height "0%"
    :anchor "top center")
  (bar))

(defwidget corners []
  (box
    :class "corners-box"
    (box
      :class "corners-left"
      :hexpand false
      :halign "start")
    (box
      :class "corners-right"
      :hexpand false
      :halign "end")))

(defwidget corners-alt []
  (box
    :class "corners-box-alt"
    (box
      :class "corners-left-alt"
      :hexpand false
      :halign "start")
    (box
      :class "corners-right-alt"
      :hexpand false
      :halign "end")))

(defwindow corners
  :stacking "bg"
  :monitor "0"
  :exclusive false
  :namespace "corners"
  :geometry (geometry
    :x "0px"
    :y "0px"
    :width "100%"
    :height "0%"
    :anchor "top center")
  (corners))

(defwindow corners_alt
  :stacking "bg"
  :monitor "0"
  :exclusive false
  :namespace "corners"
  :geometry (geometry
    :x "0px"
    :y "0px"
    :width "100%"
    :height "0%"
    :anchor "bottom center")
  (corners-alt))

; OSD
(defwidget volume-osd []
  (box
    :class "osd volume-osd"
    :spacing 0
    :space-evenly false
    :orientation "h"
    :hexpand true
    (image :class "osd-icon" :path vol-icon :image-height "45")
    (scale
      :flipped false
      :orientation "h"
      :value vol-num
      :draw-value true
      :min 0
      :max 101
    )
  )
)

(defwindow volume_osd
  :stacking "overlay"
  :monitor "0"
  :exclusive false
  :namespace "volume-osd"
  :geometry (geometry
    :x "0px"
    :y "5%"
    :width "15%"
    :height "5%"
    :anchor "bottom center"
  )
  (volume-osd)
)

(defwidget brightness-osd []
  (box
    :class "osd brightness-osd"
    :spacing 0
    :space-evenly false
    :orientation "h"
    :hexpand true
    (image :class "osd-icon" :path "images/brightness.svg" :image-height "45")
    (scale
      :flipped false
      :orientation "h"
      :value br
      :draw-value true
      :min 0
      :max 101
    )
  )
)

(defwindow brightness_osd
  :stacking "overlay"
  :monitor "0"
  :exclusive false
  :namespace "brightness-osd"
  :geometry (geometry
    :x "0px"
    :y "5%"
    :width "15%"
    :height "5%"
    :anchor "bottom center"
  )
  (brightness-osd)
)
